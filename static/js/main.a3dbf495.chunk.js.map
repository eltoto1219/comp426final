{"version":3,"sources":["message.js","constants.js","navbar.js","room.js","profile.js","login.js","App.js","reportWebVitals.js","index.js"],"names":["Message","this","props","message","email","isOwnMessage","author","ListGroup","Item","style","styles","container","body","React","Component","maxWidth","borderRadius","padding","color","fontSize","backgroundColor","float","flexDirection","timestamp","textAlign","paddingTop","config","url","API_URL","Navbar","profile","location","state","componentWillUnmount","history","replace","room","logout","push","Row","Col","xs","md","Button","variant","onClick","to","Chat","require","Room","componentDidMount","a","token","getToken","Error","Client","create","client","getSubscribedChannels","on","updateToken","channel","joinChannel","getChannelByUniqueName","createChannel","uniqueName","friendlyName","axios","get","result","data","channelState","status","join","handleMessageAdded","getMessages","b","setState","messages","items","console","log","loading","sendMessage","text","String","trim","bind","Card","Header","Body","map","index","required","placeholder","rows","value","disabled","onChange","event","target","type","display","width","Profile","info","window","reload","alert","getUserInfo","name","channels","created","handleChange","createjoin","Container","label","Login","login","button","className","marginRight","marginLeft","App","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3dbf495.chunk.js","sourcesContent":["import React from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport ListGroup from 'react-bootstrap/ListGroup';\n\n\nclass Message extends React.Component {\n\n\n  render() {\n    const { message, email } = this.props;\n    const isOwnMessage = message.author === email;\n\n    return (\n        <ListGroup.Item >\n            <div style={styles.container(isOwnMessage)}>\n                {message.body}\n                <div style={styles.author(isOwnMessage)}>{message.author}</div>\n                {/* <div style={styles.timestamp}> */}\n                {/*     {new Date(message.dateCreated.toISOString()).toLocaleString()} */}\n                {/* </div> */}\n            </div>\n        </ListGroup.Item>\n    );\n  }\n}\n\nconst styles = {\n\n  container: (isOwnMessage) => ({\n    maxWidth: \"100%\",\n    //width: \"100%\",\n    borderRadius: 12,\n    padding: 8,\n    color: \"white\",\n    fontSize: 14,\n    backgroundColor: isOwnMessage ? \"grey\" : \"blue\",\n    float: isOwnMessage ? \"right\" : \"left\",\n  }),\n    author: (isOwnMessage) =>({\n        flexDirection: \"column\",\n        fontSize: 8,\n //       float: isOwnMessage ? \"right\" : \"left\",\n        color: \"white\",\n  }),\n  timestamp: { fontSize: 8, color: \"white\", textAlign: \"right\", paddingTop: 4 },\n};\n\nexport default Message;\n","const prod = {\n url: {\n  API_URL: 'https://www.iwantadomainplz.com',\n    }\n}\nconst dev = {\n url: {\n  API_URL: 'http://localhost:5000'\n }\n}\n\nexport const config = process.env.NODE_ENV === 'development' ? dev : prod;\n\n","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Row from 'react-bootstrap/Row';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\n\n\nclass Navbar extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    componentWillUnmount(){\n    }\n\n\n    profile = () => {\n        let { location } = this.props\n        let { state } = location || {}\n        let { email } = state || {}\n        const room = ''\n\n        this.componentWillUnmount()\n        this.props.history.replace(\"profile\", {email, room})\n    }\n\n    logout = () => {\n        let { location } = this.props\n        let { state } = location || {}\n        let { email, room} = state || {}\n        room = ''\n        email = ''\n        this.componentWillUnmount()\n        this.props.history.push(\"login\")\n    }\n\n\n    render(){\n        let { location } = this.props\n        let { state } = location || {}\n        let { email } = state || {}\n        if(email){\n            return (<>\n                <br></br>\n                <Row>\n                    <Col  xs={8} md={2} >\n                        <Button variant=\"link\" onClick={this.logout}>Logout</Button>\n                    </Col>\n                    <Col  xs={8} md={2} >\n                        <Button variant=\"link\" onClick={this.profile}>Profile</Button>\n                    </Col>\n                </Row>\n                <hr />\n            </>)\n\n        }else{\n            return (<>\n                    <br></br>\n                    <Row>\n                        <Col  xs={8} md={2} >\n                        <Link to=\"/login\">Login</Link>\n                        </Col>\n                        <Col  xs={8} md={2} >\n                        <Link to=\"/profile\">Profile</Link>\n                        </Col>\n                    </Row>\n                    <hr />\n                </>)\n        }\n    }\n\n}\n\nexport default Navbar\n\n","import React from \"react\"\nimport axios from \"axios\"\nimport Message from \"./message\"\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Container from 'react-bootstrap/ListGroup';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {config} from './constants'\nimport Navbar from './navbar'\nconst Chat = require(\"twilio-chat\")\n\nclass Room extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            loading: false,\n            text: \"\",\n            messages: [1],\n            channel: null,\n        }\n\n        this.componentDidMount = this.componentDidMount.bind(this)\n\n    }\n\n    componentDidMount = async () => {\n        let { location } = this.props\n        let { state } = location || {}\n        let { room , email} = state || {}\n\n        //validation\n\n        if (!email || !room) {\n            this.props.history.push(\"/\")\n            return\n        }\n\n        //token stuff\n        //token stuff\n        let token = ''\n\n        try {\n            token = await this.getToken(email)\n        } catch {\n            throw new Error(\"cant get token\")\n        }\n\n        let client = await Chat.Client.create(token)\n\n\n\n        let channels = await client.getSubscribedChannels()\n\n        client.on(\"tokenAboutToExpire\", async () => {\n            let token = await this.getToken(email)\n            client.updateToken(token)\n        })\n\n        client.on(\"tokenExpired\", async () => {\n            let token = await this.getToken(email)\n            client.updateToken(token)\n        })\n\n        client.on(\"channelJoined\", async (channel) => {\n            this.joinChannel(channel)\n\n\n        })\n\n\n        try {\n            let channel = await client.getChannelByUniqueName(room)\n            this.joinChannel(channel)\n\n        } catch(err) {\n            try {\n                let channel = await client.createChannel({\n                    uniqueName: room,\n                    friendlyName: room,\n                })\n\n                this.joinChannel(channel)\n\n\n            } catch {\n                throw new Error(\"cant create a channel\")\n            }\n        }\n\n\n\n    }\n\n    getToken = async (email) => {\n        let result = await axios.get(`${config.url.API_URL}/token/${email}`)\n        let { data } = result\n        return data.token\n    }\n\n    joinChannel = async (channel) => {\n        if (channel.channelState.status !== \"joined\") {\n            await channel.join()\n        }else if(channel.channelState.status === \"joined\"){\n            channel.on(\"messageAdded\", this.handleMessageAdded)\n            let b = await channel.getMessages()\n            this.setState({messages: b.items})\n        }else{\n            console.log(channel.channelState.status)\n        }\n\n        this.setState({\n            channel:channel,\n            loading: false\n        })\n\n\n\n\n    }\n\n\n    handleMessageAdded = (message) => {\n        let { messages } = this.state\n        this.setState({\n            messages: [...messages, message],\n        },\n        )\n    }\n\n\n    sendMessage = () => {\n        let { text, channel } = this.state\n        if (text) {\n            this.setState({ loading: true })\n            channel.sendMessage(String(text).trim())\n            this.setState({ text: \"\", loading: false })\n        }\n    }\n\n    render() {\n        let { loading, text, messages, channel } = this.state\n        let { location } = this.props\n        let { state } = location || {}\n        let { email, room } = state || {}\n\n\n      return (\n\n        <>\n        <Container>\n            <Card>\n                <Card.Header>\n                    {`Room: ${room}, User: ${email}`}\n                </Card.Header>\n\n                <Card.Body>\n                    <Container >\n                        <ListGroup>{messages && messages.map((message) =>\n                        <Message\n                                key={message.index}\n                                //key={new Date().getTime()}\n                                message={message}\n                                email={email}/>\n                        )}</ListGroup>\n                    </Container>\n\n                    <Row>\n                        <Col  xs={12} md={8} >\n                            <input  required\n                        style={styles.message}\n                        placeholder=\"Enter message\"\n                        variant=\"outlined\"\n                        rows={2}\n                        value={text}\n                        disabled={!channel}\n                        onChange={(event) =>\n                          this.setState({ text: event.target.value })\n                        }/>\n                        </Col>\n                        <Col  xs={6} md={4} >\n                        <input\n                            variant=\"primary\"\n                            value=\"send\"\n                            type=\"button\"\n                        style={styles.message}\n                            onClick={this.sendMessage}\n                            disabled={!channel}\n                        />\n                        </Col>\n\n\n                    </Row>\n                </Card.Body>\n            </Card>\n        </Container>\n\n            <Navbar {...this.props}/>\n        </>\n      )\n    }\n}\n\nlet styles = {\n    message: {display: \"block\", width: \"100%\", borderRadius: 12, padding: -4}\n\n};\n\nexport default Room\n","import React from \"react\"\nimport axios from \"axios\"\n//import Message from \"./message\"\n//import Card from 'react-bootstrap/Card';\n//import Row from 'react-bootstrap/Row';\n//import Col from 'react-bootstrap/Col';\n//import ListGroup from 'react-bootstrap/ListGroup';\nimport Container from 'react-bootstrap/Container';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {config} from './constants'\nimport Navbar from './navbar'\nconst Chat = require(\"twilio-chat\")\n\nclass Profile extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            channels: '',\n            created: '',\n            room: '',\n        }\n\n\n    }\n\n    componentDidMount = async () => {\n        const { location } = this.props;\n        const { state } = location || {};\n        const { email } = state || {};\n        let token = \"\";\n        let info = ''\n        let name = ''\n        let room = ''\n\n\n        if (!email) {\n            this.props.history.push(\"login\");\n            return\n        }\n\n        try {\n            token = await this.getToken(email)\n        } catch {\n            window.location.reload();\n            throw new Error(\"cant get token\")\n        }\n\n        const client = await Chat.Client.create(token)\n        client.on(\"tokenAboutToExpire\", async () => {\n            const token = await this.getToken(email)\n            client.updateToken(token)\n        })\n        client.on(\"tokenExpired\", async () => {\n            const token = await this.getToken(email)\n            client.updateToken(token)\n        })\n\n        try {\n            room = await axios.get(`${config.url.API_URL}/random`)\n        } catch{\n            alert(\"cannot make room\")\n        }\n\n        try {\n            info = await this.getUserInfo(email)\n            this.setState({name: email, channels: info.channels, created: info.created,\n                room: room.data})\n\n        } catch {\n            this.setState({name: email,\n                room: room.data})\n\n        }\n\n\n\n\n\n\n    }\n\n    getToken = async (email) => {\n        const result = await axios.get(`${config.url.API_URL}/token/${email}`)\n        const { data } = result\n        return data.token\n    }\n\n    getUserInfo = async (email) => {\n        const result = await axios.get(`${config.url.API_URL}/user/${email}`)\n        const { data } = result\n        return data\n    }\n\n\n    handleChange = (event) => {\n        this.setState({room:event.target.value})\n    };\n\n\n    createjoin = () => {\n        // const { location } = this.props;\n        // const { state } = location || {};\n        let { location } = this.props;\n        let { state } = location || {};\n        let { email} = state || {};\n        const room = this.state.room\n        if (email && room) {\n            this.props.history.push(\"chat\", { email, room});\n        }\n    }\n\n\n\n    render() {\n        return (\n        <>\n        <Container>\n            <Card>\n                <Card.Header>\n                    You Are: {this.state.name}\n                    <br/>\n                    You are in {this.state.channels} channels\n                    <br/>\n                    You were born at {this.state.created}\n                </Card.Header>\n                <Card.Body>\n                    <Card>\n                        <Card.Header>\n                            Join A Channel\n                        </Card.Header>\n                        <Card.Body>\n                             <input\n                                name=\"room\"\n                                 required\n                                 label=\"Room\"\n                                 placeholder=\"Enter room name\"\n                                 variant=\"outlined\"\n                                 value={this.state.room}\n                                 onChange={this.handleChange}/>\n\n                            <br></br>\n                            <br></br>\n                            <Button variant=\"primary\" onClick={this.createjoin} >Create/Join</Button>\n\n                        </Card.Body>\n\n                    </Card>\n                </Card.Body>\n            </Card>\n        </Container>\n\n        <Navbar {...this.props}/>\n        </>\n        )\n    }\n}\n\nexport default Profile\n","import React from \"react\"\n//import axios from \"axios\"\n//import Message from \"./message\"\nimport Card from 'react-bootstrap/Card';\n//import Row from 'react-bootstrap/Row';\n//import Col from 'react-bootstrap/Col';\n//import ListGroup from 'react-bootstrap/ListGroup';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//import {config} from './constants'\n//const Chat = require(\"twilio-chat\")\n//\nimport Navbar from './navbar'\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            email: \"\",\n        }\n\n    }\n\n\n    login = () => {\n        //console.log(this.props)\n        const email = this.state.email;\n        if (email !== '') {\n            this.props.history.push(\"profile\", {email});\n        }\n    }\n\n\n    handleChange = (event) => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n\n\n    render(){\n        let email  = this.state.email;\n        return (\n        <>\n        <Container>\n            <Card>\n                <Card.Header>\n                    Login or Register Account\n                </Card.Header>\n\n                <Card.Body>\n                    <input\n                        name=\"email\"\n                        required\n                        label=\"Email address\"\n                        placeholder=\"Enter email address\"\n                        variant=\"outlined\"\n                        type={email}\n                        onChange={this.handleChange}\n                    />\n                    <br></br>\n                    <br></br>\n                    <Button\n                        style={styles.button}\n                        className=\"btn-primary\"\n                        variant=\"primary\"\n                        onClick={this.login}\n                    >Login</Button>\n                </Card.Body>\n            </Card>\n        </Container>\n\n        <Navbar/>\n        </>\n            )\n    }\n}\n\nconst styles = {\n    button: {\n        display: \"flex\",\n        marginRight: \"auto\",\n        marginLeft: \"auto\",\n    }\n}\n\n\nexport default Login\n","import './App.css';\nimport {Redirect, Route, Switch, BrowserRouter} from 'react-router-dom'\nimport Room from \"./room\";\nimport Profile from './profile'\nimport Login from './login'\n\n\n\nfunction App() {\n  return (\n        <div className=\"App\">\n            <BrowserRouter>\n                <Switch>\n                    <Route path=\"/login\" component={Login}/>\n                    <Route path=\"/chat\" component={Room}/>\n                    <Route path=\"/profile\" component={Profile}/>\n                    <Route exact path=\"/\">{<Redirect to=\"/login\" />}</Route>\n                </Switch>\n            </BrowserRouter>\n        </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n//<BrowserRouter><App/></BrowserRouter>\nReactDOM.render(\n  <React.StrictMode>\n      <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}