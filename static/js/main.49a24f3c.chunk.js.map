{"version":3,"sources":["lobby.js","message.js","room.js","router.js","App.js","reportWebVitals.js","index.js"],"names":["Lobby","props","login","state","email","room","history","push","handleChange","event","setState","target","name","value","this","AppBar","style","styles","header","elevation","Toolbar","Typography","variant","Grid","grid","container","direction","justify","alignItems","Card","card","item","gridItem","TextField","required","textField","label","placeholder","type","onChange","Button","color","button","onClick","React","Component","position","top","left","right","bottom","padding","width","paddingTop","paddingBottom","Message","message","isOwnMessage","author","ListItem","listItem","body","timestamp","Date","dateCreated","toISOString","toLocaleString","flexDirection","maxWidth","borderRadius","fontSize","backgroundColor","textAlign","Chat","require","Room","componentDidMount","a","location","token","replace","getToken","Error","Client","create","client","on","updateToken","channel","getMessages","messages","items","scrollToBottom","getChannelByUniqueName","joinChannel","createChannel","uniqueName","friendlyName","axios","get","response","data","channelState","status","join","loading","handleMessageAdded","maxScrollTop","scrollDiv","current","scrollHeight","clientHeight","scrollTop","sendMessage","text","String","trim","createRef","Container","component","Backdrop","open","zIndex","CircularProgress","CssBaseline","mainGrid","gridItemChatList","ref","List","dense","map","index","gridItemMessage","textFieldContainer","multiline","rows","disabled","IconButton","sendButton","Send","sendIcon","borderWidth","borderColor","flex","marginRight","overflow","height","marginTop","marginBottom","Router","exact","path","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49a24f3c.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Grid,\n  TextField,\n  Card,\n  AppBar,\n  Toolbar,\n  Typography,\n  Button,\n} from \"@material-ui/core\";\n\n\nclass Lobby extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            email: \"\",\n            room: \"\",\n        };\n    }\n\n    login = () => {\n        const { email, room } = this.state;\n        if (email && room) {\n            this.props.history.push(\"chat\", { room, email });\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n\n\n    render() {\n        const { email, room } = this.state;\n        return (\n        <>\n        <AppBar style={styles.header} elevation={10}>\n            <Toolbar>\n            <Typography variant=\"h6\">\n            Chat App with Twilio Programmable Chat and React\n            </Typography>\n            </Toolbar>\n        </AppBar>\n        <Grid\n            style={styles.grid}\n            container\n            direction=\"column\"\n            justify=\"center\"\n            alignItems=\"center\">\n            <Card style={styles.card} elevation={10}>\n\n                <Grid item style={styles.gridItem}>\n                    <TextField\n                    name=\"email\"\n                    required\n                    style={styles.textField}\n                    label=\"Email address\"\n                    placeholder=\"Enter email address\"\n                    variant=\"outlined\"\n                    type=\"email\"\n                    value={email}\n                    onChange={this.handleChange}/>\n                </Grid>\n\n                <Grid item style={styles.gridItem}>\n                    <TextField\n                    name=\"room\"\n                    required\n                    style={styles.textField}\n                    label=\"Room\"\n                    placeholder=\"Enter room name\"\n                    variant=\"outlined\"\n                    value={room}\n                    onChange={this.handleChange}/>\n                </Grid>\n\n                <Grid item style={styles.gridItem}>\n                    <Button\n                    color=\"primary\"\n                    variant=\"contained\"\n                    style={styles.button}\n                    onClick={this.login}>\n                    Login\n                    </Button>\n                </Grid>\n            </Card>\n        </Grid>\n      </>\n        )}\n}\n\nconst styles = {\n  header: {},\n  grid: { position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 },\n  card: { padding: 40 },\n  textField: { width: 300 },\n  gridItem: { paddingTop: 12, paddingBottom: 12 },\n  button: { width: 300 },\n};\n\nexport default Lobby;\n\n\n\n","import React from \"react\";\nimport { ListItem } from \"@material-ui/core\";\n\nclass Message extends React.Component {\n  render() {\n    const { message, email } = this.props;\n    const isOwnMessage = message.author === email;\n\n    return (\n      <ListItem style={styles.listItem(isOwnMessage)}>\n        <div style={styles.author}>{message.author}</div>\n        <div style={styles.container(isOwnMessage)}>\n          {message.body}\n          <div style={styles.timestamp}>\n            {new Date(message.dateCreated.toISOString()).toLocaleString()}\n          </div>\n        </div>\n      </ListItem>\n    );\n  }\n}\n\nconst styles = {\n  listItem: (isOwnMessage) => ({\n    flexDirection: \"column\",\n    alignItems: isOwnMessage ? \"flex-end\" : \"flex-start\",\n  }),\n  container: (isOwnMessage) => ({\n    maxWidth: \"75%\",\n    borderRadius: 12,\n    padding: 16,\n    color: \"white\",\n    fontSize: 12,\n    backgroundColor: isOwnMessage ? \"#054740\" : \"#262d31\",\n  }),\n  author: { fontSize: 10, color: \"gray\" },\n  timestamp: { fontSize: 8, color: \"white\", textAlign: \"right\", paddingTop: 4 },\n};\n\nexport default Message;\n","import React from \"react\"\nimport {\n  AppBar,\n  Backdrop,\n  CircularProgress,\n  Container,\n  CssBaseline,\n  Grid,\n  IconButton,\n  List,\n  TextField,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\"\nimport { Send } from \"@material-ui/icons\"\nimport axios from \"axios\"\nimport Message from \"./message\"\nconst Chat = require(\"twilio-chat\")\n\nclass Room extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            text: \"\",\n            messages: [],\n            loading: false,\n            channel: null,\n        }\n\n        this.scrollDiv = React.createRef()\n    }\n\n    componentDidMount = async () => {\n        const { location } = this.props\n        const { state } = location || {}\n        const { email, room } = state || {}\n        let token = \"\"\n\n        //validation\n\n        if (!email || !room) {\n            this.props.history.replace(\"/\")\n        }\n\n        //token stuff\n\n        try {\n            token = await this.getToken(email)\n        } catch {\n            throw new Error(\"Unable to get token, please reload this page\")\n        }\n\n          const client = await Chat.Client.create(token)\n\n        client.on(\"tokenAboutToExpire\", async () => {\n            const token = await this.getToken(email)\n            client.updateToken(token)\n        })\n\n        client.on(\"tokenExpired\", async () => {\n            const token = await this.getToken(email)\n            client.updateToken(token)\n        })\n\n\n        // joining a chat\n        client.on(\"channelJoined\", async (channel) => {\n            // getting list of all messages since this is an existing channel\n            const messages = await channel.getMessages()\n            this.setState({ messages: messages.items || [] })\n            this.scrollToBottom()\n        })\n\n        try {\n            const channel = await client.getChannelByUniqueName(room)\n            this.joinChannel(channel)\n        } catch(err) {\n            try {\n                const channel = await client.createChannel({\n                    uniqueName: room,\n                    friendlyName: room,\n                })\n                this.joinChannel(channel)\n            } catch {\n                throw new Error(\"Unable to create channel, please reload this page\")\n            }\n        }\n    }\n\n    getToken = async (email) => {\n        const environment = process.env.NODE_ENV === 'production' ? 'production' : 'development';\n        if(environment === \"production\"){\n            const response = await axios.get(`http://18.215.154.83/token/${email}`)\n            const { data } = response\n            return data.token\n        }else{\n            const response = await axios.get(`http://0.0.0.0:5000/token/${email}`)\n            const { data } = response\n            return data.token\n        }\n    }\n\n    joinChannel = async (channel) => {\n        if (channel.channelState.status !== \"joined\") {\n            await channel.join()\n        }\n\n        this.setState({\n            channel:channel,\n            loading: false\n        })\n\n        channel.on(\"messageAdded\", this.handleMessageAdded)\n        this.scrollToBottom()\n    }\n\n\n    handleMessageAdded = (message) => {\n        const { messages } = this.state\n        this.setState({\n            messages: [...messages, message],\n        },\n        this.scrollToBottom\n        )\n    }\n\n    scrollToBottom = () => {\n        const scrollHeight = this.scrollDiv.current.scrollHeight\n        const height = this.scrollDiv.current.clientHeight\n        const maxScrollTop = scrollHeight - height\n        this.scrollDiv.current.scrollTop = maxScrollTop > 0 ? maxScrollTop : 0\n    }\n\n    sendMessage = () => {\n        const { text, channel } = this.state\n        if (text) {\n            this.setState({ loading: true })\n            channel.sendMessage(String(text).trim())\n            this.setState({ text: \"\", loading: false })\n        }\n    }\n\n    render() {\n  const { loading, text, messages, channel } = this.state\n  const { location } = this.props\n  const { state } = location || {}\n  const { email, room } = state || {}\n\n  return (\n    <Container component=\"main\" maxWidth=\"md\">\n      <Backdrop open={loading} style={{ zIndex: 99999 }}>\n        <CircularProgress style={{ color: \"white\" }} />\n      </Backdrop>\n\n      <AppBar elevation={10}>\n        <Toolbar>\n          <Typography variant=\"h6\">\n            {`Room: ${room}, User: ${email}`}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <CssBaseline />\n\n      <Grid container direction=\"column\" style={styles.mainGrid}>\n        <Grid item style={styles.gridItemChatList} ref={this.scrollDiv}>\n          <List dense={true}>\n              {messages &&\n                messages.map((message) =>\n                  <Message\n                    key={message.index}\n                    message={message}\n                    email={email}/>\n                )}\n          </List>\n        </Grid>\n\n        <Grid item style={styles.gridItemMessage}>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"center\"\n            alignItems=\"center\">\n            <Grid item style={styles.textFieldContainer}>\n              <TextField\n                required\n                style={styles.textField}\n                placeholder=\"Enter message\"\n                variant=\"outlined\"\n                multiline\n                rows={2}\n                value={text}\n                disabled={!channel}\n                onChange={(event) =>\n                  this.setState({ text: event.target.value })\n                }/>\n            </Grid>\n\n            <Grid item>\n              <IconButton\n                style={styles.sendButton}\n                onClick={this.sendMessage}\n                disabled={!channel}>\n                <Send style={styles.sendIcon} />\n              </IconButton>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Container>\n  )}\n}\n\nconst styles = {\n  textField: { width: \"100%\", borderWidth: 0, borderColor: \"transparent\" },\n  textFieldContainer: { flex: 1, marginRight: 12 },\n  gridItem: { paddingTop: 12, paddingBottom: 12 },\n  gridItemChatList: { overflow: \"auto\", height: \"70vh\" },\n  gridItemMessage: { marginTop: 12, marginBottom: 12 },\n  sendButton: { backgroundColor: \"#3f51b5\" },\n  sendIcon: { color: \"white\" },\n  mainGrid: { paddingTop: 100, borderWidth: 1 },\n}\n\n\nexport default Room\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Lobby from \"./lobby\";\nimport Room from \"./room\";\n\nfunction Router() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/chat\" component={Room} />\n        <Route path=\"/\" component={Lobby} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default Router;\n","import React from 'react';\nimport Router from './router';\n\nfunction App() {\n  return (\n      <Router/>\n  )\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}