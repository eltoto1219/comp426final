{"version":3,"sources":["test.js","lobby.js","message.js","room.js","App.js","reportWebVitals.js","index.js"],"names":["Test","props","state","helloWorld","bind","a","axios","get","then","response","console","log","catch","error","result","React","Component","Lobby","login","email","room","history","push","handleChange","event","setState","target","name","value","this","Card","Header","Body","required","label","placeholder","variant","type","onChange","Button","onClick","Message","message","isOwnMessage","author","ListGroup","Item","style","styles","container","body","maxWidth","borderRadius","padding","color","fontSize","backgroundColor","float","flexDirection","timestamp","textAlign","paddingTop","Chat","require","Room","componentDidMount","location","replace","token","getToken","Error","Client","create","client","on","updateToken","channel","getMessages","messages","items","getChannelByUniqueName","joinChannel","createChannel","uniqueName","friendlyName","data","channelState","status","join","loading","handleMessageAdded","sendMessage","text","String","trim","map","index","Row","Col","xs","md","rows","disabled","display","width","App","className","to","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.553075fe.chunk.js","sourcesContent":["import React from 'react'\nimport axios from \"axios\"\n//import Message from \"./message\"\n//import { config } from './constants'\n//const Chat = require(\"twilio-chat\")\n\nclass Test extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n        }\n        this.helloWorld = this.helloWorld.bind(this);\n\n        //this.scrollDiv = React.createRef()\n    }\n\n    async componentDidMount(){\n        //const result = await axios.get(\"http://localhost:5000/api/token\").then((response)=>{\n        const result = await axios.get(\"http://18.215.154.83/token\").then((response)=>{\n            console.log(\"here\")\n            return response\n\n        }).catch((error)=>{\n            console.log(error)\n        })\n\n        console.log(result)\n        // const { location } = this.props\n        // const { state } = location || {}\n        // const { email, room } = state || {}\n        // let token = \"\"\n        // console.log(\"test\", result)\n    }\n\n    helloWorld(){\n        console.log(\"wtf\")\n    }\n\n    render() {\n        return(\n                <div><h2>why</h2></div>\n\n        )\n    }\n}\n\nexport default Test\n","import React from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import {\n//   Grid,\n//   TextField,\n//   Card,\n//   AppBar,\n//   Toolbar,\n//   Typography,\n//   Button,\n// } from \"@material-ui/core\";\n\n\nclass Lobby extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            email: \"\",\n            room: \"\",\n        };\n    }\n\n    login = () => {\n        //console.log(this.props)\n        const { email, room } = this.state;\n        if (email && room) {\n            this.props.history.push(\"chat\", { room, email });\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n\n\n    render () {\n        const { email, room } = this.state;\n        return (\n        <>\n            <Card>\n                <Card.Header>\n                    Enter A Room\n                </Card.Header>\n                <Card.Body>\n                    <input\n                        name=\"email\"\n                     required\n                     label=\"Email address\"\n                     placeholder=\"Enter email address\"\n                     variant=\"outlined\"\n                     type=\"email\"\n                     value={email}\n                     onChange={this.handleChange}/>\n                    <br></br>\n\n                    <input\n                        name=\"room\"\n                         required\n                         label=\"Room\"\n                         placeholder=\"Enter room name\"\n                         variant=\"outlined\"\n                         value={room}\n                         onChange={this.handleChange}/>\n\n                    <br></br>\n                    <br></br>\n                    <Button variant=\"primary\" onClick={this.login}>Login</Button>\n                </Card.Body>\n            </Card>\n        </>)\n        }\n}\n\n\nexport default Lobby;\n\n\n\n","import React from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nfunction messageColor(isOwnMessage) {\n  return { backgroundColor: isOwnMessage ? 'red' : 'blue' };\n}\n\n\nclass Message extends React.Component {\n\n\n  render() {\n    const { message, email } = this.props;\n    const isOwnMessage = message.author === email;\n\n    return (\n        <ListGroup.Item >\n            <div style={styles.container(isOwnMessage)}>\n                {message.body}\n                <div style={styles.author(isOwnMessage)}>{message.author}</div>\n                {/* <div style={styles.timestamp}> */}\n                {/*     {new Date(message.dateCreated.toISOString()).toLocaleString()} */}\n                {/* </div> */}\n            </div>\n        </ListGroup.Item>\n    );\n  }\n}\n\nconst styles = {\n\n  container: (isOwnMessage) => ({\n    maxWidth: \"100%\",\n    //width: \"100%\",\n    borderRadius: 12,\n    padding: 8,\n    color: \"white\",\n    fontSize: 14,\n    backgroundColor: isOwnMessage ? \"grey\" : \"blue\",\n    float: isOwnMessage ? \"right\" : \"left\",\n  }),\n    author: (isOwnMessage) =>({\n        flexDirection: \"column\",\n        fontSize: 10,\n        fontSize: 8,\n //       float: isOwnMessage ? \"right\" : \"left\",\n        color: \"white\",\n  }),\n  timestamp: { fontSize: 8, color: \"white\", textAlign: \"right\", paddingTop: 4 },\n};\n\nexport default Message;\n","import React from \"react\"\nimport axios from \"axios\"\nimport Message from \"./message\"\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Container from 'react-bootstrap/ListGroup';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nconst Chat = require(\"twilio-chat\")\n\nclass Room extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            text: \"\",\n            messages: [],\n            loading: false,\n            channel: null,\n        }\n\n    }\n\n    componentDidMount = async () => {\n        const { location } = this.props\n        const { state } = location || {}\n        const { email, room } = state || {}\n\n        //validation\n\n        if (!email || !room) {\n            this.props.history.replace(\"/\")\n        }\n\n        //token stuff\n        //token stuff\n        let token = ''\n\n        try {\n            token = await this.getToken(email)\n        } catch {\n            throw new Error(\"Unable to get token, please reload this page\")\n        }\n\n        const client = await Chat.Client.create(token)\n\n        client.on(\"tokenAboutToExpire\", async () => {\n            const token = await this.getToken(email)\n            client.updateToken(token)\n        })\n\n        client.on(\"tokenExpired\", async () => {\n            const token = await this.getToken(email)\n            client.updateToken(token)\n        })\n        // joining a chat\n        client.on(\"channelJoined\", async (channel) => {\n            // getting list of all messages since this is an existing channel\n            const messages = await channel.getMessages()\n            this.setState({ messages: messages.items || [] })\n        })\n\n        try {\n            const channel = await client.getChannelByUniqueName(room)\n            this.joinChannel(channel)\n        } catch(err) {\n            try {\n                const channel = await client.createChannel({\n                    uniqueName: room,\n                    friendlyName: room,\n                })\n                this.joinChannel(channel)\n            } catch {\n                throw new Error(\"Unable to create channel, please reload this page\")\n            }\n        }\n    }\n\n    getToken = async (email) => {\n        const result = await axios.get(`http://18.215.154.83/token/${email}`)\n        const { data } = result\n        console.log(\"wweee\")\n        return data.token\n    }\n\n    joinChannel = async (channel) => {\n        if (channel.channelState.status !== \"joined\") {\n            await channel.join()\n        }\n\n        this.setState({\n            channel:channel,\n            loading: false\n        })\n\n        channel.on(\"messageAdded\", this.handleMessageAdded)\n    }\n\n\n    handleMessageAdded = (message) => {\n        const { messages } = this.state\n        this.setState({\n            messages: [...messages, message],\n        },\n        )\n    }\n\n\n    sendMessage = () => {\n        const { text, channel } = this.state\n        if (text) {\n            this.setState({ loading: true })\n            channel.sendMessage(String(text).trim())\n            this.setState({ text: \"\", loading: false })\n        }\n    }\n\n    render() {\n      const { loading, text, messages, channel } = this.state\n      const { location } = this.props\n      const { state } = location || {}\n      const { email, room } = state || {}\n\n      return (\n        <>\n        <Container>\n            <Card>\n                <Card.Header>\n                    {`Room: ${room}, User: ${email}`}\n                </Card.Header>\n\n                <Card.Body>\n                    <Container >\n                        <ListGroup>{messages && messages.map((message) =>\n                        <Message\n                                key={message.index}\n                                message={message}\n                                email={email}/>\n                        )}</ListGroup>\n                    </Container>\n\n                    <Row>\n                        <Col  xs={12} md={8} >\n                            <input  required\n                        style={styles.message}\n                        placeholder=\"Enter message\"\n                        variant=\"outlined\"\n                        rows={2}\n                        value={text}\n                        disabled={!channel}\n                        onChange={(event) =>\n                          this.setState({ text: event.target.value })\n                        }/>\n                        </Col>\n                        <Col  xs={6} md={4} >\n                        <input\n                            variant=\"primary\"\n                            value=\"send\"\n                            type=\"button\"\n                        style={styles.message}\n                            onClick={this.sendMessage}\n                            disabled={!channel}\n                        />\n                        </Col>\n\n\n                    </Row>\n                </Card.Body>\n            </Card>\n        </Container>\n        </>\n      )\n    }\n}\n\nconst styles = {\n    message: {display: \"block\", width: \"100%\", borderRadius: 12, padding: -4}\n\n};\n\nexport default Room\n","import './App.css';\nimport Test from './test'\nimport {Redirect, Route, Switch, BrowserRouter, Link} from 'react-router-dom'\nimport Lobby from \"./lobby\";\nimport Room from \"./room\";\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\n\n\nfunction App() {\n  return (\n        <div className=\"App\">\n    <BrowserRouter>\n                    <Row>\n                        <Col  xs={8} md={2} >\n                            <div> <Link to=\"/\">Lobby</Link></div>\n\n                        </Col>\n                        <Col  xs={8} md={2} >\n                        </Col>\n                    </Row>\n\n\n        <hr />\n            <Switch>\n                <Route path=\"/lobby\" component={Lobby}/>\n                <Route path=\"/test\" component={Test}/>\n                <Route path=\"/chat\" component={Room}/>\n                <Route exact path=\"/\">{<Redirect to=\"/lobby\" />}</Route>\n\n            </Switch>\n    </BrowserRouter>\n        </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n//<BrowserRouter><App/></BrowserRouter>\nReactDOM.render(\n  <React.StrictMode>\n      <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}